<?php
/**
 * VectorSearchQueryRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Wordlift\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Manager
 *
 * Subscription management and related services.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@wordlift.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Wordlift\Client\Model;

use \ArrayAccess;
use \Wordlift\Client\ObjectSerializer;

/**
 * VectorSearchQueryRequest Class Doc Comment
 *
 * @category Class
 * @description A query request.
 * @package  Wordlift\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VectorSearchQueryRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VectorSearchQueryRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fields' => 'string[]',
        'filters' => '\Wordlift\Client\Model\Filter[]',
        'query_embedding' => 'float[]',
        'query_string' => 'string',
        'query_uri' => 'string',
        'query_url' => 'string',
        'similarity_top_k' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fields' => null,
        'filters' => null,
        'query_embedding' => 'double',
        'query_string' => null,
        'query_uri' => 'uri',
        'query_url' => 'url',
        'similarity_top_k' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fields' => false,
        'filters' => false,
        'query_embedding' => false,
        'query_string' => false,
        'query_uri' => false,
        'query_url' => false,
        'similarity_top_k' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fields' => 'fields',
        'filters' => 'filters',
        'query_embedding' => 'query_embedding',
        'query_string' => 'query_string',
        'query_uri' => 'query_uri',
        'query_url' => 'query_url',
        'similarity_top_k' => 'similarity_top_k'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fields' => 'setFields',
        'filters' => 'setFilters',
        'query_embedding' => 'setQueryEmbedding',
        'query_string' => 'setQueryString',
        'query_uri' => 'setQueryUri',
        'query_url' => 'setQueryUrl',
        'similarity_top_k' => 'setSimilarityTopK'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fields' => 'getFields',
        'filters' => 'getFilters',
        'query_embedding' => 'getQueryEmbedding',
        'query_string' => 'getQueryString',
        'query_uri' => 'getQueryUri',
        'query_url' => 'getQueryUrl',
        'similarity_top_k' => 'getSimilarityTopK'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fields', $data ?? [], null);
        $this->setIfExists('filters', $data ?? [], null);
        $this->setIfExists('query_embedding', $data ?? [], null);
        $this->setIfExists('query_string', $data ?? [], null);
        $this->setIfExists('query_uri', $data ?? [], null);
        $this->setIfExists('query_url', $data ?? [], null);
        $this->setIfExists('similarity_top_k', $data ?? [], 2);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['similarity_top_k']) && ($this->container['similarity_top_k'] < 1)) {
            $invalidProperties[] = "invalid value for 'similarity_top_k', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fields
     *
     * @return string[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param string[]|null $fields List of extra fields to be retrieved.
     *
     * @return self
     */
    public function setFields($fields)
    {
        if (is_null($fields)) {
            throw new \InvalidArgumentException('non-nullable fields cannot be null');
        }


        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Wordlift\Client\Model\Filter[]|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Wordlift\Client\Model\Filter[]|null $filters A list of prefilters.
     *
     * @return self
     */
    public function setFilters($filters)
    {
        if (is_null($filters)) {
            throw new \InvalidArgumentException('non-nullable filters cannot be null');
        }
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets query_embedding
     *
     * @return float[]|null
     */
    public function getQueryEmbedding()
    {
        return $this->container['query_embedding'];
    }

    /**
     * Sets query_embedding
     *
     * @param float[]|null $query_embedding The list of embeddings, not required if `query_string` is provided.
     *
     * @return self
     */
    public function setQueryEmbedding($query_embedding)
    {
        if (is_null($query_embedding)) {
            throw new \InvalidArgumentException('non-nullable query_embedding cannot be null');
        }
        $this->container['query_embedding'] = $query_embedding;

        return $this;
    }

    /**
     * Gets query_string
     *
     * @return string|null
     */
    public function getQueryString()
    {
        return $this->container['query_string'];
    }

    /**
     * Sets query_string
     *
     * @param string|null $query_string The query string, not required if the `query_embeddings` are provided. Please note that the `query_string` is ignored if the `query_embeddings` are provided.
     *
     * @return self
     */
    public function setQueryString($query_string)
    {
        if (is_null($query_string)) {
            throw new \InvalidArgumentException('non-nullable query_string cannot be null');
        }
        $this->container['query_string'] = $query_string;

        return $this;
    }

    /**
     * Gets query_uri
     *
     * @return string|null
     */
    public function getQueryUri()
    {
        return $this->container['query_uri'];
    }

    /**
     * Sets query_uri
     *
     * @param string|null $query_uri Perform a Vector Search based on similarities with an entity with the specified URI.
     *
     * @return self
     */
    public function setQueryUri($query_uri)
    {
        if (is_null($query_uri)) {
            throw new \InvalidArgumentException('non-nullable query_uri cannot be null');
        }
        $this->container['query_uri'] = $query_uri;

        return $this;
    }

    /**
     * Gets query_url
     *
     * @return string|null
     */
    public function getQueryUrl()
    {
        return $this->container['query_url'];
    }

    /**
     * Sets query_url
     *
     * @param string|null $query_url Perform a Vector Search based on similarities with an entity with the specified URL (schema:url).
     *
     * @return self
     */
    public function setQueryUrl($query_url)
    {
        if (is_null($query_url)) {
            throw new \InvalidArgumentException('non-nullable query_url cannot be null');
        }
        $this->container['query_url'] = $query_url;

        return $this;
    }

    /**
     * Gets similarity_top_k
     *
     * @return int|null
     */
    public function getSimilarityTopK()
    {
        return $this->container['similarity_top_k'];
    }

    /**
     * Sets similarity_top_k
     *
     * @param int|null $similarity_top_k The similarity top K.
     *
     * @return self
     */
    public function setSimilarityTopK($similarity_top_k)
    {
        if (is_null($similarity_top_k)) {
            throw new \InvalidArgumentException('non-nullable similarity_top_k cannot be null');
        }

        if (($similarity_top_k < 1)) {
            throw new \InvalidArgumentException('invalid value for $similarity_top_k when calling VectorSearchQueryRequest., must be bigger than or equal to 1.');
        }

        $this->container['similarity_top_k'] = $similarity_top_k;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


