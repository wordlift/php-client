<?php
/**
 * WithLimits
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Manager
 *
 * Subscription management and related services.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@wordlift.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WithLimits Class Doc Comment
 *
 * @category Class
 * @description An array of objects.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WithLimits implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WithLimits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_limits' => 'int',
        'applies_to' => 'string',
        'block' => 'bool',
        'consumption' => 'int',
        'id' => 'int',
        'limits' => 'int',
        'reference_id' => 'int',
        'reference_type' => 'string',
        'remaining' => 'int',
        'resets_in_seconds' => 'int',
        'subscription_limits' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_limits' => 'int32',
        'applies_to' => null,
        'block' => null,
        'consumption' => 'int32',
        'id' => 'int64',
        'limits' => 'int32',
        'reference_id' => 'int64',
        'reference_type' => null,
        'remaining' => 'int32',
        'resets_in_seconds' => 'int64',
        'subscription_limits' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_limits' => false,
        'applies_to' => false,
        'block' => false,
        'consumption' => false,
        'id' => false,
        'limits' => false,
        'reference_id' => false,
        'reference_type' => false,
        'remaining' => false,
        'resets_in_seconds' => false,
        'subscription_limits' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_limits' => 'account_limits',
        'applies_to' => 'applies_to',
        'block' => 'block',
        'consumption' => 'consumption',
        'id' => 'id',
        'limits' => 'limits',
        'reference_id' => 'reference_id',
        'reference_type' => 'reference_type',
        'remaining' => 'remaining',
        'resets_in_seconds' => 'resets_in_seconds',
        'subscription_limits' => 'subscription_limits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_limits' => 'setAccountLimits',
        'applies_to' => 'setAppliesTo',
        'block' => 'setBlock',
        'consumption' => 'setConsumption',
        'id' => 'setId',
        'limits' => 'setLimits',
        'reference_id' => 'setReferenceId',
        'reference_type' => 'setReferenceType',
        'remaining' => 'setRemaining',
        'resets_in_seconds' => 'setResetsInSeconds',
        'subscription_limits' => 'setSubscriptionLimits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_limits' => 'getAccountLimits',
        'applies_to' => 'getAppliesTo',
        'block' => 'getBlock',
        'consumption' => 'getConsumption',
        'id' => 'getId',
        'limits' => 'getLimits',
        'reference_id' => 'getReferenceId',
        'reference_type' => 'getReferenceType',
        'remaining' => 'getRemaining',
        'resets_in_seconds' => 'getResetsInSeconds',
        'subscription_limits' => 'getSubscriptionLimits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const REFERENCE_TYPE_SUBSCRIPTION = 'SUBSCRIPTION';
    public const REFERENCE_TYPE_ACCOUNT = 'ACCOUNT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReferenceTypeAllowableValues()
    {
        return [
            self::REFERENCE_TYPE_SUBSCRIPTION,
            self::REFERENCE_TYPE_ACCOUNT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_limits', $data ?? [], null);
        $this->setIfExists('applies_to', $data ?? [], null);
        $this->setIfExists('block', $data ?? [], null);
        $this->setIfExists('consumption', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('limits', $data ?? [], null);
        $this->setIfExists('reference_id', $data ?? [], null);
        $this->setIfExists('reference_type', $data ?? [], null);
        $this->setIfExists('remaining', $data ?? [], null);
        $this->setIfExists('resets_in_seconds', $data ?? [], null);
        $this->setIfExists('subscription_limits', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['applies_to'] === null) {
            $invalidProperties[] = "'applies_to' can't be null";
        }
        if (!is_null($this->container['consumption']) && ($this->container['consumption'] < 1)) {
            $invalidProperties[] = "invalid value for 'consumption', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getReferenceTypeAllowableValues();
        if (!is_null($this->container['reference_type']) && !in_array($this->container['reference_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reference_type', must be one of '%s'",
                $this->container['reference_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_limits
     *
     * @return int|null
     */
    public function getAccountLimits()
    {
        return $this->container['account_limits'];
    }

    /**
     * Sets account_limits
     *
     * @param int|null $account_limits account_limits
     *
     * @return self
     */
    public function setAccountLimits($account_limits)
    {
        if (is_null($account_limits)) {
            throw new \InvalidArgumentException('non-nullable account_limits cannot be null');
        }
        $this->container['account_limits'] = $account_limits;

        return $this;
    }

    /**
     * Gets applies_to
     *
     * @return string
     */
    public function getAppliesTo()
    {
        return $this->container['applies_to'];
    }

    /**
     * Sets applies_to
     *
     * @param string $applies_to applies_to
     *
     * @return self
     */
    public function setAppliesTo($applies_to)
    {
        if (is_null($applies_to)) {
            throw new \InvalidArgumentException('non-nullable applies_to cannot be null');
        }
        $this->container['applies_to'] = $applies_to;

        return $this;
    }

    /**
     * Gets block
     *
     * @return bool|null
     */
    public function getBlock()
    {
        return $this->container['block'];
    }

    /**
     * Sets block
     *
     * @param bool|null $block block
     *
     * @return self
     */
    public function setBlock($block)
    {
        if (is_null($block)) {
            throw new \InvalidArgumentException('non-nullable block cannot be null');
        }
        $this->container['block'] = $block;

        return $this;
    }

    /**
     * Gets consumption
     *
     * @return int|null
     */
    public function getConsumption()
    {
        return $this->container['consumption'];
    }

    /**
     * Sets consumption
     *
     * @param int|null $consumption consumption
     *
     * @return self
     */
    public function setConsumption($consumption)
    {
        if (is_null($consumption)) {
            throw new \InvalidArgumentException('non-nullable consumption cannot be null');
        }

        if (($consumption < 1)) {
            throw new \InvalidArgumentException('invalid value for $consumption when calling WithLimits., must be bigger than or equal to 1.');
        }

        $this->container['consumption'] = $consumption;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets limits
     *
     * @return int|null
     */
    public function getLimits()
    {
        return $this->container['limits'];
    }

    /**
     * Sets limits
     *
     * @param int|null $limits limits
     *
     * @return self
     */
    public function setLimits($limits)
    {
        if (is_null($limits)) {
            throw new \InvalidArgumentException('non-nullable limits cannot be null');
        }
        $this->container['limits'] = $limits;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return int|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param int|null $reference_id reference_id
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        if (is_null($reference_id)) {
            throw new \InvalidArgumentException('non-nullable reference_id cannot be null');
        }
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets reference_type
     *
     * @return string|null
     */
    public function getReferenceType()
    {
        return $this->container['reference_type'];
    }

    /**
     * Sets reference_type
     *
     * @param string|null $reference_type reference_type
     *
     * @return self
     */
    public function setReferenceType($reference_type)
    {
        if (is_null($reference_type)) {
            throw new \InvalidArgumentException('non-nullable reference_type cannot be null');
        }
        $allowedValues = $this->getReferenceTypeAllowableValues();
        if (!in_array($reference_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reference_type', must be one of '%s'",
                    $reference_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reference_type'] = $reference_type;

        return $this;
    }

    /**
     * Gets remaining
     *
     * @return int|null
     */
    public function getRemaining()
    {
        return $this->container['remaining'];
    }

    /**
     * Sets remaining
     *
     * @param int|null $remaining remaining
     *
     * @return self
     */
    public function setRemaining($remaining)
    {
        if (is_null($remaining)) {
            throw new \InvalidArgumentException('non-nullable remaining cannot be null');
        }
        $this->container['remaining'] = $remaining;

        return $this;
    }

    /**
     * Gets resets_in_seconds
     *
     * @return int|null
     */
    public function getResetsInSeconds()
    {
        return $this->container['resets_in_seconds'];
    }

    /**
     * Sets resets_in_seconds
     *
     * @param int|null $resets_in_seconds resets_in_seconds
     *
     * @return self
     */
    public function setResetsInSeconds($resets_in_seconds)
    {
        if (is_null($resets_in_seconds)) {
            throw new \InvalidArgumentException('non-nullable resets_in_seconds cannot be null');
        }
        $this->container['resets_in_seconds'] = $resets_in_seconds;

        return $this;
    }

    /**
     * Gets subscription_limits
     *
     * @return int|null
     */
    public function getSubscriptionLimits()
    {
        return $this->container['subscription_limits'];
    }

    /**
     * Sets subscription_limits
     *
     * @param int|null $subscription_limits subscription_limits
     *
     * @return self
     */
    public function setSubscriptionLimits($subscription_limits)
    {
        if (is_null($subscription_limits)) {
            throw new \InvalidArgumentException('non-nullable subscription_limits cannot be null');
        }
        $this->container['subscription_limits'] = $subscription_limits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


