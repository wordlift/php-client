<?php
/**
 * AccountInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Manager
 *
 * Subscription management and related services.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@wordlift.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AccountInfo Class Doc Comment
 *
 * @category Class
 * @description Account Information
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'dataset_id' => 'string',
        'dataset_uri' => 'string',
        'features' => 'array<string,bool>',
        'google_search_console_site_url' => 'string',
        'include_exclude_default' => 'string',
        'key' => 'string',
        'language' => 'string',
        'networks' => '\OpenAPI\Client\Model\NetworkAccountInfo[]',
        'ng_dataset_id' => 'string',
        'subscription_id' => 'int',
        'url' => 'string',
        'wp_admin' => 'string',
        'wp_json' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => 'int64',
        'dataset_id' => null,
        'dataset_uri' => null,
        'features' => null,
        'google_search_console_site_url' => null,
        'include_exclude_default' => null,
        'key' => null,
        'language' => null,
        'networks' => null,
        'ng_dataset_id' => null,
        'subscription_id' => 'int64',
        'url' => null,
        'wp_admin' => null,
        'wp_json' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => false,
        'dataset_id' => false,
        'dataset_uri' => false,
        'features' => false,
        'google_search_console_site_url' => false,
        'include_exclude_default' => false,
        'key' => false,
        'language' => false,
        'networks' => false,
        'ng_dataset_id' => false,
        'subscription_id' => false,
        'url' => false,
        'wp_admin' => false,
        'wp_json' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'dataset_id' => 'datasetId',
        'dataset_uri' => 'datasetUri',
        'features' => 'features',
        'google_search_console_site_url' => 'googleSearchConsoleSiteUrl',
        'include_exclude_default' => 'includeExcludeDefault',
        'key' => 'key',
        'language' => 'language',
        'networks' => 'networks',
        'ng_dataset_id' => 'ngDatasetId',
        'subscription_id' => 'subscriptionId',
        'url' => 'url',
        'wp_admin' => 'wpAdmin',
        'wp_json' => 'wpJson'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'dataset_id' => 'setDatasetId',
        'dataset_uri' => 'setDatasetUri',
        'features' => 'setFeatures',
        'google_search_console_site_url' => 'setGoogleSearchConsoleSiteUrl',
        'include_exclude_default' => 'setIncludeExcludeDefault',
        'key' => 'setKey',
        'language' => 'setLanguage',
        'networks' => 'setNetworks',
        'ng_dataset_id' => 'setNgDatasetId',
        'subscription_id' => 'setSubscriptionId',
        'url' => 'setUrl',
        'wp_admin' => 'setWpAdmin',
        'wp_json' => 'setWpJson'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'dataset_id' => 'getDatasetId',
        'dataset_uri' => 'getDatasetUri',
        'features' => 'getFeatures',
        'google_search_console_site_url' => 'getGoogleSearchConsoleSiteUrl',
        'include_exclude_default' => 'getIncludeExcludeDefault',
        'key' => 'getKey',
        'language' => 'getLanguage',
        'networks' => 'getNetworks',
        'ng_dataset_id' => 'getNgDatasetId',
        'subscription_id' => 'getSubscriptionId',
        'url' => 'getUrl',
        'wp_admin' => 'getWpAdmin',
        'wp_json' => 'getWpJson'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('dataset_id', $data ?? [], null);
        $this->setIfExists('dataset_uri', $data ?? [], null);
        $this->setIfExists('features', $data ?? [], null);
        $this->setIfExists('google_search_console_site_url', $data ?? [], null);
        $this->setIfExists('include_exclude_default', $data ?? [], 'include');
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('networks', $data ?? [], null);
        $this->setIfExists('ng_dataset_id', $data ?? [], null);
        $this->setIfExists('subscription_id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('wp_admin', $data ?? [], null);
        $this->setIfExists('wp_json', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['dataset_uri'] === null) {
            $invalidProperties[] = "'dataset_uri' can't be null";
        }
        if ($this->container['networks'] === null) {
            $invalidProperties[] = "'networks' can't be null";
        }
        if ($this->container['subscription_id'] === null) {
            $invalidProperties[] = "'subscription_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id The Account Id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets dataset_id
     *
     * @return string|null
     */
    public function getDatasetId()
    {
        return $this->container['dataset_id'];
    }

    /**
     * Sets dataset_id
     *
     * @param string|null $dataset_id The Dataset Id
     *
     * @return self
     */
    public function setDatasetId($dataset_id)
    {
        if (is_null($dataset_id)) {
            throw new \InvalidArgumentException('non-nullable dataset_id cannot be null');
        }
        $this->container['dataset_id'] = $dataset_id;

        return $this;
    }

    /**
     * Gets dataset_uri
     *
     * @return string
     */
    public function getDatasetUri()
    {
        return $this->container['dataset_uri'];
    }

    /**
     * Sets dataset_uri
     *
     * @param string $dataset_uri The dataset URI
     *
     * @return self
     */
    public function setDatasetUri($dataset_uri)
    {
        if (is_null($dataset_uri)) {
            throw new \InvalidArgumentException('non-nullable dataset_uri cannot be null');
        }
        $this->container['dataset_uri'] = $dataset_uri;

        return $this;
    }

    /**
     * Gets features
     *
     * @return array<string,bool>|null
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param array<string,bool>|null $features A list of features enabled or disabled for the account
     *
     * @return self
     */
    public function setFeatures($features)
    {
        if (is_null($features)) {
            throw new \InvalidArgumentException('non-nullable features cannot be null');
        }
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets google_search_console_site_url
     *
     * @return string|null
     */
    public function getGoogleSearchConsoleSiteUrl()
    {
        return $this->container['google_search_console_site_url'];
    }

    /**
     * Sets google_search_console_site_url
     *
     * @param string|null $google_search_console_site_url Google Search Console Site URL
     *
     * @return self
     */
    public function setGoogleSearchConsoleSiteUrl($google_search_console_site_url)
    {
        if (is_null($google_search_console_site_url)) {
            throw new \InvalidArgumentException('non-nullable google_search_console_site_url cannot be null');
        }
        $this->container['google_search_console_site_url'] = $google_search_console_site_url;

        return $this;
    }

    /**
     * Gets include_exclude_default
     *
     * @return string|null
     */
    public function getIncludeExcludeDefault()
    {
        return $this->container['include_exclude_default'];
    }

    /**
     * Sets include_exclude_default
     *
     * @param string|null $include_exclude_default The default setting for include/exclude URLs.
     *
     * @return self
     */
    public function setIncludeExcludeDefault($include_exclude_default)
    {
        if (is_null($include_exclude_default)) {
            throw new \InvalidArgumentException('non-nullable include_exclude_default cannot be null');
        }
        $this->container['include_exclude_default'] = $include_exclude_default;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key The Key
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language The language code
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets networks
     *
     * @return \OpenAPI\Client\Model\NetworkAccountInfo[]
     */
    public function getNetworks()
    {
        return $this->container['networks'];
    }

    /**
     * Sets networks
     *
     * @param \OpenAPI\Client\Model\NetworkAccountInfo[] $networks A list of connected Account Information
     *
     * @return self
     */
    public function setNetworks($networks)
    {
        if (is_null($networks)) {
            throw new \InvalidArgumentException('non-nullable networks cannot be null');
        }
        $this->container['networks'] = $networks;

        return $this;
    }

    /**
     * Gets ng_dataset_id
     *
     * @return string|null
     */
    public function getNgDatasetId()
    {
        return $this->container['ng_dataset_id'];
    }

    /**
     * Sets ng_dataset_id
     *
     * @param string|null $ng_dataset_id ng_dataset_id
     *
     * @return self
     */
    public function setNgDatasetId($ng_dataset_id)
    {
        if (is_null($ng_dataset_id)) {
            throw new \InvalidArgumentException('non-nullable ng_dataset_id cannot be null');
        }
        $this->container['ng_dataset_id'] = $ng_dataset_id;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return int
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param int $subscription_id The Subscription Id
     *
     * @return self
     */
    public function setSubscriptionId($subscription_id)
    {
        if (is_null($subscription_id)) {
            throw new \InvalidArgumentException('non-nullable subscription_id cannot be null');
        }
        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url The website URL
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets wp_admin
     *
     * @return string|null
     */
    public function getWpAdmin()
    {
        return $this->container['wp_admin'];
    }

    /**
     * Sets wp_admin
     *
     * @param string|null $wp_admin If WordPress, the WP-ADMIN URL
     *
     * @return self
     */
    public function setWpAdmin($wp_admin)
    {
        if (is_null($wp_admin)) {
            throw new \InvalidArgumentException('non-nullable wp_admin cannot be null');
        }
        $this->container['wp_admin'] = $wp_admin;

        return $this;
    }

    /**
     * Gets wp_json
     *
     * @return string|null
     */
    public function getWpJson()
    {
        return $this->container['wp_json'];
    }

    /**
     * Sets wp_json
     *
     * @param string|null $wp_json If WordPress, the WP-JSON end-point
     *
     * @return self
     */
    public function setWpJson($wp_json)
    {
        if (is_null($wp_json)) {
            throw new \InvalidArgumentException('non-nullable wp_json cannot be null');
        }
        $this->container['wp_json'] = $wp_json;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


