<?php
/**
 * MerchantSync
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Manager
 *
 * Subscription management and related services.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@wordlift.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MerchantSync Class Doc Comment
 *
 * @category Class
 * @description A Merchant products data synchronization.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantSync implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantSync';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created_at' => '\DateTime',
        'error_reason' => 'string',
        'has_errors' => 'bool',
        'id' => 'int',
        'merchant_id' => 'int',
        'modified_at' => '\DateTime',
        'products_created' => 'int',
        'products_deleted' => 'int',
        'products_errored' => 'int',
        'products_skipped' => 'int',
        'products_total' => 'int',
        'products_unchanged' => 'int',
        'products_updated' => 'int',
        'started_at' => '\DateTime',
        'stopped_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created_at' => 'date-time',
        'error_reason' => null,
        'has_errors' => null,
        'id' => 'int64',
        'merchant_id' => 'int64',
        'modified_at' => 'date-time',
        'products_created' => 'int32',
        'products_deleted' => 'int32',
        'products_errored' => 'int32',
        'products_skipped' => 'int32',
        'products_total' => 'int32',
        'products_unchanged' => 'int32',
        'products_updated' => 'int32',
        'started_at' => 'date-time',
        'stopped_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'created_at' => false,
        'error_reason' => false,
        'has_errors' => false,
        'id' => false,
        'merchant_id' => false,
        'modified_at' => false,
        'products_created' => false,
        'products_deleted' => false,
        'products_errored' => false,
        'products_skipped' => false,
        'products_total' => false,
        'products_unchanged' => false,
        'products_updated' => false,
        'started_at' => false,
        'stopped_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'created_at',
        'error_reason' => 'error_reason',
        'has_errors' => 'has_errors',
        'id' => 'id',
        'merchant_id' => 'merchant_id',
        'modified_at' => 'modified_at',
        'products_created' => 'products_created',
        'products_deleted' => 'products_deleted',
        'products_errored' => 'products_errored',
        'products_skipped' => 'products_skipped',
        'products_total' => 'products_total',
        'products_unchanged' => 'products_unchanged',
        'products_updated' => 'products_updated',
        'started_at' => 'started_at',
        'stopped_at' => 'stopped_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
        'error_reason' => 'setErrorReason',
        'has_errors' => 'setHasErrors',
        'id' => 'setId',
        'merchant_id' => 'setMerchantId',
        'modified_at' => 'setModifiedAt',
        'products_created' => 'setProductsCreated',
        'products_deleted' => 'setProductsDeleted',
        'products_errored' => 'setProductsErrored',
        'products_skipped' => 'setProductsSkipped',
        'products_total' => 'setProductsTotal',
        'products_unchanged' => 'setProductsUnchanged',
        'products_updated' => 'setProductsUpdated',
        'started_at' => 'setStartedAt',
        'stopped_at' => 'setStoppedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
        'error_reason' => 'getErrorReason',
        'has_errors' => 'getHasErrors',
        'id' => 'getId',
        'merchant_id' => 'getMerchantId',
        'modified_at' => 'getModifiedAt',
        'products_created' => 'getProductsCreated',
        'products_deleted' => 'getProductsDeleted',
        'products_errored' => 'getProductsErrored',
        'products_skipped' => 'getProductsSkipped',
        'products_total' => 'getProductsTotal',
        'products_unchanged' => 'getProductsUnchanged',
        'products_updated' => 'getProductsUpdated',
        'started_at' => 'getStartedAt',
        'stopped_at' => 'getStoppedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('error_reason', $data ?? [], null);
        $this->setIfExists('has_errors', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('modified_at', $data ?? [], null);
        $this->setIfExists('products_created', $data ?? [], null);
        $this->setIfExists('products_deleted', $data ?? [], null);
        $this->setIfExists('products_errored', $data ?? [], null);
        $this->setIfExists('products_skipped', $data ?? [], null);
        $this->setIfExists('products_total', $data ?? [], null);
        $this->setIfExists('products_unchanged', $data ?? [], null);
        $this->setIfExists('products_updated', $data ?? [], null);
        $this->setIfExists('started_at', $data ?? [], null);
        $this->setIfExists('stopped_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['error_reason']) && (mb_strlen($this->container['error_reason']) > 500)) {
            $invalidProperties[] = "invalid value for 'error_reason', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['error_reason']) && (mb_strlen($this->container['error_reason']) < 0)) {
            $invalidProperties[] = "invalid value for 'error_reason', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The create date-time.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets error_reason
     *
     * @return string|null
     */
    public function getErrorReason()
    {
        return $this->container['error_reason'];
    }

    /**
     * Sets error_reason
     *
     * @param string|null $error_reason Error that caused the synchronization to fail.
     *
     * @return self
     */
    public function setErrorReason($error_reason)
    {
        if (is_null($error_reason)) {
            throw new \InvalidArgumentException('non-nullable error_reason cannot be null');
        }
        if ((mb_strlen($error_reason) > 500)) {
            throw new \InvalidArgumentException('invalid length for $error_reason when calling MerchantSync., must be smaller than or equal to 500.');
        }
        if ((mb_strlen($error_reason) < 0)) {
            throw new \InvalidArgumentException('invalid length for $error_reason when calling MerchantSync., must be bigger than or equal to 0.');
        }

        $this->container['error_reason'] = $error_reason;

        return $this;
    }

    /**
     * Gets has_errors
     *
     * @return bool|null
     */
    public function getHasErrors()
    {
        return $this->container['has_errors'];
    }

    /**
     * Sets has_errors
     *
     * @param bool|null $has_errors Whether the sync encountered errors.
     *
     * @return self
     */
    public function setHasErrors($has_errors)
    {
        if (is_null($has_errors)) {
            throw new \InvalidArgumentException('non-nullable has_errors cannot be null');
        }
        $this->container['has_errors'] = $has_errors;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id The parent Merchant id.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return \DateTime|null
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param \DateTime|null $modified_at The last modified date-time.
     *
     * @return self
     */
    public function setModifiedAt($modified_at)
    {
        if (is_null($modified_at)) {
            throw new \InvalidArgumentException('non-nullable modified_at cannot be null');
        }
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets products_created
     *
     * @return int|null
     */
    public function getProductsCreated()
    {
        return $this->container['products_created'];
    }

    /**
     * Sets products_created
     *
     * @param int|null $products_created The number of created products
     *
     * @return self
     */
    public function setProductsCreated($products_created)
    {
        if (is_null($products_created)) {
            throw new \InvalidArgumentException('non-nullable products_created cannot be null');
        }
        $this->container['products_created'] = $products_created;

        return $this;
    }

    /**
     * Gets products_deleted
     *
     * @return int|null
     */
    public function getProductsDeleted()
    {
        return $this->container['products_deleted'];
    }

    /**
     * Sets products_deleted
     *
     * @param int|null $products_deleted The number of deleted products
     *
     * @return self
     */
    public function setProductsDeleted($products_deleted)
    {
        if (is_null($products_deleted)) {
            throw new \InvalidArgumentException('non-nullable products_deleted cannot be null');
        }
        $this->container['products_deleted'] = $products_deleted;

        return $this;
    }

    /**
     * Gets products_errored
     *
     * @return int|null
     */
    public function getProductsErrored()
    {
        return $this->container['products_errored'];
    }

    /**
     * Sets products_errored
     *
     * @param int|null $products_errored The number of errored products
     *
     * @return self
     */
    public function setProductsErrored($products_errored)
    {
        if (is_null($products_errored)) {
            throw new \InvalidArgumentException('non-nullable products_errored cannot be null');
        }
        $this->container['products_errored'] = $products_errored;

        return $this;
    }

    /**
     * Gets products_skipped
     *
     * @return int|null
     */
    public function getProductsSkipped()
    {
        return $this->container['products_skipped'];
    }

    /**
     * Sets products_skipped
     *
     * @param int|null $products_skipped The number of skipped products
     *
     * @return self
     */
    public function setProductsSkipped($products_skipped)
    {
        if (is_null($products_skipped)) {
            throw new \InvalidArgumentException('non-nullable products_skipped cannot be null');
        }
        $this->container['products_skipped'] = $products_skipped;

        return $this;
    }

    /**
     * Gets products_total
     *
     * @return int|null
     */
    public function getProductsTotal()
    {
        return $this->container['products_total'];
    }

    /**
     * Sets products_total
     *
     * @param int|null $products_total The total number of processed products, including the skipped and errored.
     *
     * @return self
     */
    public function setProductsTotal($products_total)
    {
        if (is_null($products_total)) {
            throw new \InvalidArgumentException('non-nullable products_total cannot be null');
        }
        $this->container['products_total'] = $products_total;

        return $this;
    }

    /**
     * Gets products_unchanged
     *
     * @return int|null
     */
    public function getProductsUnchanged()
    {
        return $this->container['products_unchanged'];
    }

    /**
     * Sets products_unchanged
     *
     * @param int|null $products_unchanged The number of products that haven't changed and therefore haven't been synced again
     *
     * @return self
     */
    public function setProductsUnchanged($products_unchanged)
    {
        if (is_null($products_unchanged)) {
            throw new \InvalidArgumentException('non-nullable products_unchanged cannot be null');
        }
        $this->container['products_unchanged'] = $products_unchanged;

        return $this;
    }

    /**
     * Gets products_updated
     *
     * @return int|null
     */
    public function getProductsUpdated()
    {
        return $this->container['products_updated'];
    }

    /**
     * Sets products_updated
     *
     * @param int|null $products_updated The number of update products
     *
     * @return self
     */
    public function setProductsUpdated($products_updated)
    {
        if (is_null($products_updated)) {
            throw new \InvalidArgumentException('non-nullable products_updated cannot be null');
        }
        $this->container['products_updated'] = $products_updated;

        return $this;
    }

    /**
     * Gets started_at
     *
     * @return \DateTime|null
     */
    public function getStartedAt()
    {
        return $this->container['started_at'];
    }

    /**
     * Sets started_at
     *
     * @param \DateTime|null $started_at The started date-time.
     *
     * @return self
     */
    public function setStartedAt($started_at)
    {
        if (is_null($started_at)) {
            throw new \InvalidArgumentException('non-nullable started_at cannot be null');
        }
        $this->container['started_at'] = $started_at;

        return $this;
    }

    /**
     * Gets stopped_at
     *
     * @return \DateTime|null
     */
    public function getStoppedAt()
    {
        return $this->container['stopped_at'];
    }

    /**
     * Sets stopped_at
     *
     * @param \DateTime|null $stopped_at The stopped date-time.
     *
     * @return self
     */
    public function setStoppedAt($stopped_at)
    {
        if (is_null($stopped_at)) {
            throw new \InvalidArgumentException('non-nullable stopped_at cannot be null');
        }
        $this->container['stopped_at'] = $stopped_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


